--ping so 
local scall = syn.secure_call;

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local BACFolder = ReplicatedStorage.BAC;
local NetworkModule = BACFolder.Network;

local Network = require(NetworkModule);
local NetworkMT = getrawmetatable(Network);
local NetworkMT__Index = NetworkMT.__index;

local FireServer = scall(NetworkMT__Index, NetworkModule, Network, "FireServer")
local FireServerMT = getrawmetatable(FireServer);

local NUMBER = shared.FunnyPingNumber;
if not NUMBER then
    local call = FireServerMT.__call;
    FireServerMT.__call = function(self, ...)
        if NUMBER then return call(self, ...);end;
        local Arguments = {...};
        if table.find(Arguments, "Ping") then
            NUMBER = Arguments[3];
            shared.FunnyPingNumber = NUMBER;
        end;
        
        return call(self, ...);
    end;

    repeat wait() until NUMBER;
    task.spawn(function()
        while task.wait(4) do
            scall(FireServer, NetworkModule, "BAC", "Ping", NUMBER);
        end;
    end)
end;


--get all of the scripts
local BAC, C, _;
for I, Script in next, game:GetDescendants() do
    if typeof(Script) == "Instance" and Script.ClassName == "LocalScript" then
        local Name = Script.Name;
        if Name:match("B%.A%.C") then
            BAC = Script;
        elseif Name:match("%[C%]") then
            C = Script;
        elseif Name:match("\n") or Name:match("_") then
            _ = Script;
        end;
    end;
end;

--stop [C] from checking whether or not BAC is disabled
--this causes an error in the dev console
for I, F in next, getgc(false) do
    if type(F) == "function" and islclosure(F) and not is_synapse_function(F) then
        if table.find(getconstants(F), BAC.Name) then
            setconstant(F, 14, "COCONUTONTOP");
            break;
        end;
    end;
end;

--stop BAC from calling PreloadAsync (GUI DETECTION)
--this causes an error in the dev console
for I, F in next, getgc(false) do
    if type(F) == "function" and islclosure(F) and not is_synapse_function(F) and getfenv(F) and getfenv(F).script and getfenv(F).script == BAC then
        local Upvalues = getupvalues(F);
        
        for I, V in next, Upvalues do
            if tostring(V) and tostring(V):match("ContentProvider") then
                setupvalue(F, I, "COCONUTONTOP");
            end;
        end;
    end;
end;

--stop metamethod hooks
for I, F in next, getgc(false) do
    if type(F) == "function" and islclosure(F) and not is_synapse_function(F) and getfenv(F) and getfenv(F).script and getfenv(F).script == _ then
        local constants = getconstants(F);

        if table.find(constants, "game") then
            getfenv(F).COCONUTONTOP_game = {};
            for I, C in next, constants do
                if type(C) == "string" and (C == "game" or C == "Game") then
                    setconstant(F, I, "COCONUTONTOP_game");
                end;
            end;
        end;
    end;
end;

--[[hitbox extender]]
local baseHitboxSize = Vector3.new(2, 2, 1);
local baseTransparency = 1;
--[spoofer]
local oldGameIndex; oldGameIndex = hookmetamethod(game, "__index", newcclosure(function(...)
    local Self, Key = ...;

    if typeof(Self) == "Instance" and type(Key) == "string" and tostring(Self) == "HumanoidRootPart" and (Key == "Size" or Key == "Transparency") then
        if Key == "Size" then
            return baseHitboxSize;
        end;
        return baseTransparency;
    end;

    return oldGameIndex(...);
end));
-----------------------------------------------------------------------------------------------------------------
local Flux = loadstring(game:HttpGet"https://raw.githubusercontent.com/dawid-scripts/UI-Libs/main/fluxlib.txt")()

local win = Flux:Window("Stay Mad ðŸ¤¬", "Version 1.7.6", Color3.fromRGB(255, 110, 48), Enum.KeyCode.LeftControl)
local tab = win:Tab("Boom Kid's Features", "http://www.roblox.com/asset/?id=6023426915")
tab:Button("Boom Kid's AutoFarm", "Plays for you killing players while YOU are afk", function()
    Flux:Notification("AutoFarm enabled note: This is Boom Kid's Auto mine is in my section", "Alright")
    
game:GetService("RunService").Stepped:Connect(function()
    local lp = game.Players.LocalPlayer
    local plr1 = lp.Character
    while game.Workspace.GameMap and lp.PlayerGui.ScreenGui.UI.Target.Visible do
    local Target = lp.PlayerGui.ScreenGui:WaitForChild("UI"):WaitForChild("Target"):WaitForChild("TargetText").Text
    local plr2 = game.Workspace:WaitForChild(Target)
    game.Workspace.Gravity = 0
    game.Players.LocalPlayer.Character.Humanoid:SetStateEnabled(15,false)
    game.Players.LocalPlayer.Character.Humanoid:SetStateEnabled(16,false)
    game:GetService("TweenService"):Create(plr1:WaitForChild("HumanoidRootPart"),TweenInfo.new(5.35),{CFrame= plr2:WaitForChild("HumanoidRootPart").CFrame}):Play()
        local noclip = true 
    local meme = game.Players.LocalPlayer.Character 
    while wait() do 
      if noclip == true then 
        for _,v in pairs(meme:children()) do 
          pcall(function() if v.className == "Part" then v.CanCollide = false elseif v.ClassName == "Model" then
             v.Head.CanCollide = false end end) 
        end 
      end 
    game:service("RunService").Stepped:wait() 
    end
end
end)

spawn(function()
    local function randompart()
        local hits = {
            0,
            1,
            2,
            -1,
            -2,
        }
        return hits[math.random(1, #hits)]
    end
    while wait() do
        pcall(function()
            if game.Players.LocalPlayer.Backpack:FindFirstChild("Knife") then
                for i, v in pairs(game.Players:GetPlayers()) do
                    if v.Name == game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text then
                        if v.Name ~= game.Players.LocalPlayer.Name then
                            game.Players.LocalPlayer.Character.Humanoid:EquipTool(Game.Players.LocalPlayer.Backpack.Knife)
                            wait(.3)
                            local Target = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text
                            local x = game.Workspace[Target].HumanoidRootPart.Position.X + randompart()
                            local y = game.Workspace[Target].HumanoidRootPart.Position.Y + randompart()
                            local z = game.Workspace[Target].HumanoidRootPart.Position.Z + randompart()
                            local args = {
                                [1] = Vector3.new(x, y, z),
                                [2] = 0,
                                [3] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                            }
                            game:GetService("ReplicatedStorage").Remotes.ThrowKnife:FireServer(unpack(args))
                            wait(.1)
                            game:GetService("Players").localPlayer.Character:FindFirstChildOfClass("Humanoid"):UnequipTools()
                            wait(.6)
                        end
                    end
                end
            end
        end)
    end
end)

spawn(function()
    while wait(300) do
        pcall(function()
            game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
        end)
    end
end)
end)
tab:Button("AutoThrow", "Auto throws knife killing player", function()
    Flux:Notification("Auto throw enabled", "Alright")
    spawn(function()
    local function randompart()
        local hits = {
            0,
            1,
            2,
            -1,
            -2,
        }
        return hits[math.random(1, #hits)]
    end
    while wait() do
        pcall(function()
            if game.Players.LocalPlayer.Backpack:FindFirstChild("Knife") then
                for i, v in pairs(game.Players:GetPlayers()) do
                    if v.Name == game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text then
                        if v.Name ~= game.Players.LocalPlayer.Name then
                            game.Players.LocalPlayer.Character.Humanoid:EquipTool(Game.Players.LocalPlayer.Backpack.Knife)
                            wait(.3)
                            local Target = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text
                            local x = game.Workspace[Target].HumanoidRootPart.Position.X + randompart()
                            local y = game.Workspace[Target].HumanoidRootPart.Position.Y + randompart()
                            local z = game.Workspace[Target].HumanoidRootPart.Position.Z + randompart()
                            local args = {
                                [1] = Vector3.new(x, y, z),
                                [2] = 0,
                                [3] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                            }
                            game:GetService("ReplicatedStorage").Remotes.ThrowKnife:FireServer(unpack(args))
                            wait(.1)
                            game:GetService("Players").localPlayer.Character:FindFirstChildOfClass("Humanoid"):UnequipTools()
                            wait(.6)
                        end
                    end
                end
            end
        end)
    end
end)
end)
tab:Button("Rejoin game", "Rejoins the game you are currently playing", function()
Flux:Notification("Rejoining.....", "Alright")
wait(1)
game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
end)
tab:Line()
tab:Button("FLY", "Fly around", function(t)
    Flux:Notification("FLY enabled (Press E)", "Alright")
local script = game:GetService'Players'.LocalPlayer.PlayerScripts.reeeee;
local tablefind = table.find;
local gc = getgc();
for I, Function in next, gc do
    if type(Function) == 'function' and islclosure(Function) and getfenv(Function).script == script then
        local constants = getconstants(Function);
        if tablefind(constants, 'Health') then
            local BodyMoverIndex = tablefind(constants, 'BodyMover');
            if BodyMoverIndex then
                setconstant(Function, BodyMoverIndex, 'game');
                break;
            end;
        end;
    end;
end;
repeat task.wait() until game.Players.LocalPlayer
local plr = game.Players.LocalPlayer
repeat task.wait() until plr:GetMouse()
local mouse = plr:GetMouse();

local flying = true
local deb = true
local ctrl = {f = 0, b = 0, l = 0, r = 0}
local lastctrl = {f = 0, b = 0, l = 0, r = 0}
local maxspeed = 50
local speed = 0

function Fly()
	repeat task.wait() until plr.Character and plr.Character:findFirstChild("Torso") and plr.Character:findFirstChild("Humanoid")
	local torso = plr.Character.Torso
	local bg = Instance.new("BodyGyro", torso)
	bg.P = 9e4
	bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
	bg.cframe = torso.CFrame
	local bv = Instance.new("BodyVelocity", torso)
	bv.velocity = Vector3.new(0,0.1,0)
	bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
	repeat wait()
		plr.Character.Humanoid.PlatformStand = true
		if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
			speed = speed+.5+(speed/maxspeed)
			if speed > maxspeed then
				speed = maxspeed
			end
		elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then
			speed = speed-1
			if speed < 0 then
				speed = 0
			end
		end
		if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
			bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
			lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
		elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then
			bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
		else
			bv.velocity = Vector3.new(0,0.1,0)
		end
		bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0)
	until not flying
	ctrl = {f = 0, b = 0, l = 0, r = 0}
	lastctrl = {f = 0, b = 0, l = 0, r = 0}
	speed = 0
	bg:Destroy()
	bv:Destroy()
	plr.Character.Humanoid.PlatformStand = false
end
mouse.KeyDown:connect(function(key)
	if key:lower() == "e" then
		if flying then flying = false
		else
			flying = true
			Fly()
		end
	elseif key:lower() == "w" then
		ctrl.f = 1
	elseif key:lower() == "s" then
		ctrl.b = -1
	elseif key:lower() == "a" then
		ctrl.l = -1
	elseif key:lower() == "d" then
		ctrl.r = 1
	end
end)
mouse.KeyUp:connect(function(key)
	if key:lower() == "w" then
		ctrl.f = 0
	elseif key:lower() == "s" then
		ctrl.b = 0
	elseif key:lower() == "a" then
		ctrl.l = 0
	elseif key:lower() == "d" then
		ctrl.r = 0
	end
end)
Fly()
end)
tab:Slider("Walkspeed", "Makes your faster.", 0, 30,16,function(t)
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = t
end)
local tab = win:Tab("Shush Stuff", "http://www.roblox.com/asset/?id=6022668888")
tab:Button("AutoFarm", "Plays for you killing players while YOU are afk", function()
    Flux:Notification("AutoFarm enabled note: If auto farm gets stuck click the rejoin button. Also auto rejoins after 5mins", "Alright")
repeat wait() until game:IsLoaded() and game.Players and game.Players.LocalPlayer and game.Players.LocalPlayer.Character

spawn(function()
    local function pathfind()
        local Target = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text

        -- get pathfinding service
        local pathfindingService = game:GetService("PathfindingService")
        
        -- Variables for NPC humanoid, torso, and destination
        local humanoid = game:GetService("Players").LocalPlayer.Character.Humanoid
        local body = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart") or game:GetService("Players").LocalPlayer.Character:FindFirstChild("Torso")
        local destination = game.Workspace[Target].HumanoidRootPart.Position
        
        -- create path object
        local path = pathfindingService:CreatePath()
        
        -- compute a path
        path:ComputeAsync(body.Position, destination)
        
        -- get the waypoints table
        local waypoints = path:GetWaypoints()
        
        -- iterate through all waypoints, and jump when necessary
        for k, waypoint in pairs(waypoints) do
            humanoid:MoveTo(waypoint.Position)
            
            -- change humanoid state to jump if necessary
            if waypoint.Action == Enum.PathWaypointAction.Jump then
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
            
            humanoid.MoveToFinished:Wait()
        end
    end

    while wait(.2) do
        pcall(function()
            if game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.Visible == true and game.Players.LocalPlayer.Character.Humanoid.Health > 0 then
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 25
                pathfind()
            end
        end)
    end
end)

spawn(function()
    local scall = syn.secure_call;
    
    local NetworkModule = game:GetService("ReplicatedStorage").BAC.Network;
    local Network = require(NetworkModule);
    local NetworkMT = getrawmetatable(Network);
    local Index = NetworkMT.__index;
    local FireServer = scall(Index, NetworkModule, Network, "FireServer");
    
    local function FireRemote(...)
        return scall(FireServer, NetworkModule, ...);
    end;
    local function StabPerson(Person)
        return FireRemote("kill", Person, newproxy(), nil, "stab");
    end;
    
    local Players = game:GetService("Players");
    local FFC = game.FindFirstChild;
    local function FindFirstPlayer(Name)
        return FFC(Players, Name);
    end;
    local TargetObject = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target;
    local TargetText = TargetObject.TargetText;
    local Target;
    local function Changed()
        Target = nil;
        local T = TargetText.Text;
        local V = TargetText.Visible;
        local V2 = TargetObject.Visible;
        
        if V and V2 then
            if T and #T > 1 then
                Target = FindFirstPlayer(T);
            end;
        end;
    end;
    TargetText.Changed:Connect(Changed);
    TargetObject.Changed:Connect(Changed);
    Changed();
    
    while wait(.5) do
        if Target and game.Players.LocalPlayer.Backpack:FindFirstChild("Knife") then
            StabPerson(Target);
        end;
    end;
end)

spawn(function()
    local function randompart()
        local hits = {
            0,
            1,
            2,
            -1,
            -2,
        }
        return hits[math.random(1, #hits)]
    end
    while wait() do
        pcall(function()
            if game.Players.LocalPlayer.Backpack:FindFirstChild("Knife") then
                for i, v in pairs(game.Players:GetPlayers()) do
                    if v.Name == game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text then
                        if v.Name ~= game.Players.LocalPlayer.Name then
                            game.Players.LocalPlayer.Character.Humanoid:EquipTool(Game.Players.LocalPlayer.Backpack.Knife)
                            wait(.3)
                            local Target = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text
                            local x = game.Workspace[Target].HumanoidRootPart.Position.X + randompart()
                            local y = game.Workspace[Target].HumanoidRootPart.Position.Y + randompart()
                            local z = game.Workspace[Target].HumanoidRootPart.Position.Z + randompart()
                            local args = {
                                [1] = Vector3.new(x, y, z),
                                [2] = 0,
                                [3] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                            }
                            game:GetService("ReplicatedStorage").Remotes.ThrowKnife:FireServer(unpack(args))
                            wait(.1)
                            game:GetService("Players").localPlayer.Character:FindFirstChildOfClass("Humanoid"):UnequipTools()
                            wait(.6)
                        end
                    end
                end
            end
        end)
    end
end)

spawn(function()
    while wait(300) do
        pcall(function()
            game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
        end)
    end
end)
end)
tab:Button("GodMode", "You become invis + godded", function()
    Flux:Notification("GodMode enabled", "Alright")
    spawn(function()
    while wait(1) do
        pcall(function()
            if game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.SpectateBar.ButtonBar.GhostB.Visible == true then
                wait(.5)
                for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.SpectateBar.ButtonBar.GhostB.MouseButton1Click)) do
                    v:Fire()
                end
            end
        end)
    end
end)

spawn(function()
    while wait(.5) do
        pcall(function()
            for _,v in pairs(game:GetService("Workspace").GhostCoins:GetDescendants()) do
                if v:IsA("TouchTransmitter") then
                    firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent, 0) --0 is touch
                    wait(.5)
                    firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent, 1) -- 1 is untouch
                end
            end
        end)
    end
end)
end)
tab:Button("HBE", "Shush's HBE", function()
    rconsolename("High level HBE")
rconsolewarn("Hello! Do you want to use HBE? If so type Yes if not type No")
local ask = rconsoleinput()
if ask == "Yes" then
    rconsoleprint("What do you want the size to be? ")
    local size = rconsoleinput()
     rconsoleprint("Do you want target to be a distinct colour? ")
     local targetAnswer = rconsoleinput()
     if game.GameId == 142553158 then
         rconsoleprint('Bypassing AntiCheat..\n3\n2\n1\n')
--ping so 
local scall = syn.secure_call;

local ReplicatedStorage = game:GetService("ReplicatedStorage");
local BACFolder = ReplicatedStorage.BAC;
local NetworkModule = BACFolder.Network;

local Network = require(NetworkModule);
local NetworkMT = getrawmetatable(Network);
local NetworkMT__Index = NetworkMT.__index;

local FireServer = scall(NetworkMT__Index, NetworkModule, Network, "FireServer")
local FireServerMT = getrawmetatable(FireServer);

local NUMBER = shared.FunnyPingNumber;
if not NUMBER then
    local call = FireServerMT.__call;
    FireServerMT.__call = function(self, ...)
        if NUMBER then return call(self, ...);end;
        local Arguments = {...};
        if table.find(Arguments, "Ping") then
            NUMBER = Arguments[3];
            shared.FunnyPingNumber = NUMBER;
        end;
        
        return call(self, ...);
    end;

    repeat wait() until NUMBER;
    task.spawn(function()
        while task.wait(4) do
            scall(FireServer, NetworkModule, "BAC", "Ping", NUMBER);
        end;
    end)
end;


--get all of the scripts
local BAC, C, _;
for I, Script in next, game:GetDescendants() do
    if typeof(Script) == "Instance" and Script.ClassName == "LocalScript" then
        local Name = Script.Name;
        if Name:match("B%.A%.C") then
            BAC = Script;
        elseif Name:match("%[C%]") then
            C = Script;
        elseif Name:match("\n") or Name:match("_") then
            _ = Script;
        end;
    end;
end;

--stop [C] from checking whether or not BAC is disabled
--this causes an error in the dev console
for I, F in next, getgc(false) do
    if type(F) == "function" and islclosure(F) and not is_synapse_function(F) then
        if table.find(getconstants(F), BAC.Name) then
            setconstant(F, 14, "COCONUTONTOP");
            break;
        end;
    end;
end;

--stop BAC from calling PreloadAsync (GUI DETECTION)
--this causes an error in the dev console
for I, F in next, getgc(false) do
    if type(F) == "function" and islclosure(F) and not is_synapse_function(F) and getfenv(F) and getfenv(F).script and getfenv(F).script == BAC then
        local Upvalues = getupvalues(F);
        
        for I, V in next, Upvalues do
            if tostring(V) and tostring(V):match("ContentProvider") then
                setupvalue(F, I, "COCONUTONTOP");
            end;
        end;
    end;
end;

--stop metamethod hooks
for I, F in next, getgc(false) do
    if type(F) == "function" and islclosure(F) and not is_synapse_function(F) and getfenv(F) and getfenv(F).script and getfenv(F).script == _ then
        local constants = getconstants(F);

        if table.find(constants, "game") then
            getfenv(F).COCONUTONTOP_game = {};
            for I, C in next, constants do
                if type(C) == "string" and (C == "game" or C == "Game") then
                    setconstant(F, I, "COCONUTONTOP_game");
                end;
            end;
        end;
    end;
end;

--[[hitbox extender]]
local baseHitboxSize = Vector3.new(2, 2, 1);
local baseTransparency = 1;
--[spoofer]
local oldGameIndex; oldGameIndex = hookmetamethod(game, "__index", newcclosure(function(...)
    local Self, Key = ...;

    if typeof(Self) == "Instance" and type(Key) == "string" and tostring(Self) == "HumanoidRootPart" and (Key == "Size" or Key == "Transparency") then
        if Key == "Size" then
            return baseHitboxSize;
        end;
        return baseTransparency;
    end;

    return oldGameIndex(...);
end));
     if targetAnswer == "Yes" then 
    rconsoleprint("Bypass completed\n")
    rconsoleprint('Target colour set to Green and Size set to '..size)
local target = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text
spawn(function()
    game:GetService('RunService').RenderStepped:connect(function()
for i,v in pairs(game:GetService('Players'):GetPlayers()) do
    if v.Name ~= game.Players.LocalPlayer.Name then
game.Workspace[v.Name].HumanoidRootPart.Size = Vector3.new(size,size,size)
game.Workspace[v.Name].HumanoidRootPart.Transparency = .7
game.Workspace[v.Name].HumanoidRootPart.BrickColor = BrickColor.new("Really red")
game.Workspace[v.Name].HumanoidRootPart.Material = "Neon"
game.Workspace[v.Name].HumanoidRootPart.CanCollide = false
local target = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text
if v.Name == target and v.Name ~= game.Players.LocalPlayer.Name then
    game.Workspace[v.Name].HumanoidRootPart.BrickColor = BrickColor.new("Bright green")
    end
end
end
end)
end)
     elseif targetAnswer == "No" then
         rconsoleprint("Bypass completed\n")
         rconsoleprint('Target colour OFF and Size set to '..size)
         spawn(function()
    game:GetService('RunService').RenderStepped:connect(function()
for i,v in pairs(game:GetService('Players'):GetPlayers()) do
    if v.Name ~= game.Players.LocalPlayer.Name then
game.Workspace[v.Name].HumanoidRootPart.Size = Vector3.new(size,size,size)
game.Workspace[v.Name].HumanoidRootPart.Transparency = .7
game.Workspace[v.Name].HumanoidRootPart.BrickColor = BrickColor.new("Really red")
game.Workspace[v.Name].HumanoidRootPart.Material = "Neon"
game.Workspace[v.Name].HumanoidRootPart.CanCollide = false
end
end
end)
end)
     end
     elseif game.GameId ~= 142553158 then 
         rconsolewarn('YOU ARENT IN THE CORRECT GAME KICK HAS BEEN SENT')
         while wait() do
         game.Players.LocalPlayer:Kick("INCORRECT GAME FOUND")
         end
         end
    elseif ask == "No" then
   rconsolewarn('KICKING')
   while wait() do
   game.Players.LocalPlayer:Kick("KICKED AS YOU PICKED NO")
   end
end
end)
